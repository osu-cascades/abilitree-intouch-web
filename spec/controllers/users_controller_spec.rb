require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do
  include Devise::Test::ControllerHelpers
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { first_name: 'First',
      last_name: 'Last',
      user_type: 'admin',
      password: 'password',
      username: 'testuser'
    }
  end

  let(:invalid_attributes) do
    { first_name: 'a' * 51,
      last_name: 'b' * 51,
      password: 'pass',
      username: 'c' * 51
    }
  end

  describe 'GET #index' do
    it 'redirects when not logged in' do
      get :index, params: {}
      expect(response).to redirect_to(new_user_session_url)
    end
  end

  context 'User is signed in' do
    describe 'GET #index' do
      it 'Returns a successful response' do
        user = double('user')
        allow(request.env['warden']).to receive(:authenticate!).and_return(user)
        allow(controller).to receive(:current_user).and_return(user)
        get :index, params: {}
        expect(response).to be_successful
      end
    end
  end
end
